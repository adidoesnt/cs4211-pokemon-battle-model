#define active 1; //trainer active
#define inactive 0; //trainer inactive
#define win 2; // trainer wins
#define lose -1; //trainer loses

var trainer[2] = [active, inactive]; //initial trainer states
var currentPokemon[2] = [0, 0]; // index of trainers current pokemon

var trainer0AttackStats[6] = [1, 1, 1, 1, 1, 1];
var trainer0DefenceStats[6] = [1, 1, 1, 1, 1, 1];
var trainer0HealthStats[6] = [10, 10, 10, 10, 10, 10];
var trainer0Levels[6] = [1, 1, 1, 1, 1, 1];

var trainer0pokemon0moves = [90, 90, 100, 80];
var trainer0pokemon1moves = [90, 90, 100, 80];
var trainer0pokemon2moves = [90, 90, 100, 80];
var trainer0pokemon3moves = [90, 90, 100, 80];
var trainer0pokemon4moves = [90, 90, 100, 80];
var trainer0pokemon5moves = [90, 90, 100, 80];

var trainer1AttackStats[6] = [1, 1, 1, 1, 1, 1];
var trainer1DefenceStats[6] = [1, 1, 1, 1, 1, 1];
var trainer1HealthStats[6] = [10, 10, 10, 10, 10, 10];
var trainer1Levels[6] = [1, 1, 1, 1, 1, 1];

var trainer1pokemon0moves = [90, 90, 100, 80];
var trainer1pokemon1moves = [90, 90, 100, 80];
var trainer1pokemon2moves = [90, 90, 100, 80];
var trainer1pokemon3moves = [90, 90, 100, 80];
var trainer1pokemon4moves = [90, 90, 100, 80];
var trainer1pokemon5moves = [90, 90, 100, 80];

rotate() = 
        [trainer[0] == active && trainer[1] == inactive]switchTrainer{trainer[0] = inactive; trainer[1] = active} -> move(1)
        []
        [trainer[1] == active && trainer[0] == inactive]switchTrainer{trainer[1] = inactive; trainer[0] = active} -> move(0);
        
move(i) = 
        [i == 0 && currentPokemon[1] == 0]attackFoe.i{trainer1HealthStats[0] = trainer1HealthStats[0] - 1} -> switch(1, 0)
        []
        [i == 0 && currentPokemon[1] == 1]attackFoe.i{trainer1HealthStats[1] = trainer1HealthStats[1] - 1} -> switch(1, 1)
        []
        [i == 0 && currentPokemon[1] == 2]attackFoe.i{trainer1HealthStats[2] = trainer1HealthStats[2] - 1} -> switch(1, 2)
        []
        [i == 0 && currentPokemon[1] == 3]attackFoe.i{trainer1HealthStats[3] = trainer1HealthStats[3] - 1} -> switch(1, 3)
        []
        [i == 0 && currentPokemon[1] == 4]attackFoe.i{trainer1HealthStats[4] = trainer1HealthStats[4] - 1} -> switch(1, 4)
        []
        [i == 0 && currentPokemon[1] == 5]attackFoe.i{trainer1HealthStats[5] = trainer1HealthStats[5] - 1} -> switch(1, 5)
        []
        [i == 1 && currentPokemon[0] == 0]attackFoe.i{trainer0HealthStats[0] = trainer0HealthStats[0] - 1} -> switch(0, 0)
        []
        [i == 1 && currentPokemon[0] == 1]attackFoe.i{trainer0HealthStats[1] = trainer0HealthStats[1] - 1} -> switch(0, 1)
        []
        [i == 1 && currentPokemon[0] == 2]attackFoe.i{trainer0HealthStats[2] = trainer0HealthStats[2] - 1} -> switch(0, 2)
        []
        [i == 1 && currentPokemon[0] == 3]attackFoe.i{trainer0HealthStats[3] = trainer0HealthStats[3] - 1} -> switch(0, 3)
        []
        [i == 1 && currentPokemon[0] == 4]attackFoe.i{trainer0HealthStats[4] = trainer0HealthStats[4] - 1} -> switch(0, 4)
        []
        [i == 1 && currentPokemon[0] == 5]attackFoe.i{trainer0HealthStats[5] = trainer0HealthStats[5] - 1} -> switch(0, 5);

switch(i, c) =
        [i == 1]sendPokemon.i{if (trainer1HealthStats[c] <= 0) {currentPokemon[i] = c + 1}} -> end()
        []
        [i == 0]sendPokemon.i{if (trainer0HealthStats[c] <= 0) {currentPokemon[i] = c + 1}} -> end();

end() =
        [currentPokemon[0] > 5]trainer1win{trainer[0] = lose; trainer[1] = win} -> Stop
        []
        [currentPokemon[1] > 5]trainer0win{trainer[0] = win; trainer[1] = lose} -> Stop
        []
        [currentPokemon[0] <= 5 && currentPokemon[1] <= 5] rotate();

start() = 
	trainer0start{trainer[0] = active; trainer[1] = inactive} -> move(0)
	[]
	trainer1start{trainer[1] = active; trainer[0] = inactive} -> move(1);

simulate = start();

#define trainer0wins (trainer[0] == win && trainer[1] == lose);
#define trainer1wins (trainer[1] == win && trainer[0] == lose);
#define bothtrainerswin (trainer[0] == win && trainer[1] == win);
#define bothtrainerslose (trainer[0] == lose && trainer[1] == lose);

#assert simulate reaches trainer0wins;
#assert simulate reaches trainer1wins;
#assert simulate reaches bothtrainerswin;
#assert simulate reaches bothtrainerslose;
